package test.cb.state;

import java.util.Optional;
import cb.CircuitBreaker;
import cb.CircuitBreakerConfig;
import cb.CircuitOpenException;
import cb.counters.SawCounter;
import cb.state.CircuitOpen;
import service.Service;

public class CircuitOpenTest {
    public static void main(String[] args) {
        testOpen();
        testFallback();
    }

    private static void testOpen() {
        System.out.println("Test start -> testOpenCircuit()");

        Service<String, Integer> service = request -> Optional.of(Integer.parseInt(request));

        CircuitBreakerConfig configs = new CircuitBreakerConfig(10000, 3, 3);
        CircuitBreaker<String, Integer> circuitBreaker = CircuitBreaker.getInstance(configs, null, service , null, null);
 
        CircuitOpen<String, Integer> cb_open = new CircuitOpen<String, Integer>(circuitBreaker);
        cb_open.init();  // circuit opened

        try{
            cb_open.handle("200");
            throw new AssertionError("Expected -> CircuitOpenException");
        } catch (Exception e) {
            if (!(e instanceof CircuitOpenException)) {
                throw new AssertionError("Expected -> CircuitOpenException", e);
            }
        }

        System.out.println("Test finish -> testOpenCircuit()");
    }


    private static void testFallback() {
        System.out.println("Test start -> testFallback()");

        Service<String, Integer> service = request -> Optional.of(Integer.parseInt(request));
        Service<String, Integer> fallback = request -> Optional.of(Integer.valueOf(200));


        CircuitBreakerConfig configs = new CircuitBreakerConfig(10000, 3, 3);
        CircuitBreaker<String, Integer> circuitBreaker = CircuitBreaker.getInstance(configs, null, service , new SawCounter(3), fallback);
 
        CircuitOpen<String, Integer> cb_open = new CircuitOpen<String, Integer>(circuitBreaker);
        cb_open.init();  // circuit opened

        try{
            Optional<Integer> result = cb_open.handle("200");
            if (result.get() != 200) throw new AssertionError("Expected -> result 200");
        } catch (Exception e) {
            throw new AssertionError("Expected -> fallback success", e);
        }

        System.out.println("Test finish -> testFallback()");
    }
}
