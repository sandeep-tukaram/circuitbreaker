package test.cb.state;

import java.util.Optional;

import cb.CircuitBreaker;
import cb.CircuitBreakerConfig;
import cb.CircuitOpenException;
import cb.counters.SawCounter;
import cb.state.CircuitClosed;
import cb.state.CircuitHalfOpen;
import cb.state.CircuitOpen;
import retry.RetryConfig;
import service.Service;

public class CircuitHalfOpenTest {
    public static void main(String[] args) {
        testHalfTransition();
        testOpenTransition();
        testClosedTransition();
    }

    private static void testHalfTransition() {
        System.out.println("Test start -> testClosedTransition()");

        Service<String, Integer> service = request -> Optional.of(Integer.parseInt(request));

        RetryConfig retryconfig = new RetryConfig(10, 4);

        CircuitBreakerConfig configs = new CircuitBreakerConfig(10000, 5, 3);
        SawCounter failStrategy = new SawCounter(3);

        CircuitBreaker<String, Integer> circuitBreaker = CircuitBreaker.getInstance(configs, retryconfig, service , failStrategy, null);
        CircuitHalfOpen<String, Integer> cb_halfOpen = new CircuitHalfOpen<String, Integer>(circuitBreaker);

        // HALF OPEN failures > Threshold 3
        failStrategy.increment(0);

        try{
            cb_halfOpen.handle("100");
        } catch (Exception e) {
            throw new AssertionError("Expected -> Successful closed circuit request", e);
        }

        // Half open maintained
        if  (!(circuitBreaker.getState() instanceof CircuitHalfOpen))
            throw new AssertionError("Expected ->  Circuit HALFOPEN");

        System.out.println("Test finish -> testClosedTransition()");
    }

    private static void testClosedTransition() {
        System.out.println("Test start -> testClosedTransition()");

        Service<String, Integer> service = request -> Optional.of(Integer.parseInt(request));

        RetryConfig retryconfig = new RetryConfig(10, 4);

        CircuitBreakerConfig configs = new CircuitBreakerConfig(10000, 1, 3);
        SawCounter failStrategy = new SawCounter(3);

        CircuitBreaker<String, Integer> circuitBreaker = CircuitBreaker.getInstance(configs, retryconfig, service , failStrategy, null);
        CircuitHalfOpen<String, Integer> cb_halfOpen = new CircuitHalfOpen<String, Integer>(circuitBreaker);

        // HALF OPEN failures > Threshold 3
        failStrategy.increment(0);

        try{
            cb_halfOpen.handle("100");
        } catch (Exception e) {
            throw new AssertionError("Expected -> Successful closed circuit request", e);
        }

        // Check transition to OPEN
        if  (!(circuitBreaker.getState() instanceof CircuitClosed))
            throw new AssertionError("Expected ->  Circuit CLOSED");

        System.out.println("Test finish -> testClosedTransition()");
    }

    // no fall back
    private static void testOpenTransition() {
        System.out.println("Test start -> testOpenTransition()");

        Service<String, Integer> service = request -> Optional.of(Integer.parseInt(request));

        RetryConfig retryconfig = new RetryConfig(10, 4);

        CircuitBreakerConfig configs = new CircuitBreakerConfig(10000, 3, 3);
        SawCounter failStrategy = new SawCounter(3);

        CircuitBreaker<String, Integer> circuitBreaker = CircuitBreaker.getInstance(configs, retryconfig, service , failStrategy, null);
        CircuitHalfOpen<String, Integer> cb_halfOpen = new CircuitHalfOpen<String, Integer>(circuitBreaker);

        // HALF OPEN failures > Threshold 3
        failStrategy.increment(10);

        try{
            cb_halfOpen.handle("100");
        } catch (Exception e) {
            // When forwarded to Open throws CircuitOpenException
            if (!(e instanceof CircuitOpenException)) {
                throw new AssertionError("Expected -> CircuitOpenException", e);
            }        
        }

        // Check transition state
        if  (!(circuitBreaker.getState() instanceof CircuitOpen))
            throw new AssertionError("Expected ->  Circuit OPEN");

        System.out.println("Test finish -> testOpenTransition()");

    }

}
